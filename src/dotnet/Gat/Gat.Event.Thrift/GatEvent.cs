/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Gat.Event.Thrift
{

  [Serializable]
  public partial class GatEvent : TBase
  {
    private string _id;
    private GatEventType _type;
    private string _catalog;
    private string _schema;
    private string _table;
    private string _sql;
    private GatRowSet _rowSet;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public GatEventType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string Catalog
    {
      get
      {
        return _catalog;
      }
      set
      {
        __isset.catalog = true;
        this._catalog = value;
      }
    }

    public string Schema
    {
      get
      {
        return _schema;
      }
      set
      {
        __isset.schema = true;
        this._schema = value;
      }
    }

    public string Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    public string Sql
    {
      get
      {
        return _sql;
      }
      set
      {
        __isset.sql = true;
        this._sql = value;
      }
    }

    public GatRowSet RowSet
    {
      get
      {
        return _rowSet;
      }
      set
      {
        __isset.rowSet = true;
        this._rowSet = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool type;
      public bool catalog;
      public bool schema;
      public bool table;
      public bool sql;
      public bool rowSet;
    }

    public GatEvent() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Type = (GatEventType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Catalog = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Schema = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Table = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Sql = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              RowSet = new GatRowSet();
              RowSet.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GatEvent");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (Catalog != null && __isset.catalog) {
        field.Name = "catalog";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Catalog);
        oprot.WriteFieldEnd();
      }
      if (Schema != null && __isset.schema) {
        field.Name = "schema";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Schema);
        oprot.WriteFieldEnd();
      }
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Table);
        oprot.WriteFieldEnd();
      }
      if (Sql != null && __isset.sql) {
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sql);
        oprot.WriteFieldEnd();
      }
      if (RowSet != null && __isset.rowSet) {
        field.Name = "rowSet";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        RowSet.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GatEvent(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",Catalog: ");
      sb.Append(Catalog);
      sb.Append(",Schema: ");
      sb.Append(Schema);
      sb.Append(",Table: ");
      sb.Append(Table);
      sb.Append(",Sql: ");
      sb.Append(Sql);
      sb.Append(",RowSet: ");
      sb.Append(RowSet== null ? "<null>" : RowSet.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
