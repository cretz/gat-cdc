/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Gat.Event.Thrift
{

  [Serializable]
  public partial class GatEventResponse : TBase
  {
    private bool _rollback;
    private string _executeInstead;
    private GatRowSet _returnInstead;
    private List<string> _messages;

    public bool Rollback
    {
      get
      {
        return _rollback;
      }
      set
      {
        __isset.rollback = true;
        this._rollback = value;
      }
    }

    public string ExecuteInstead
    {
      get
      {
        return _executeInstead;
      }
      set
      {
        __isset.executeInstead = true;
        this._executeInstead = value;
      }
    }

    public GatRowSet ReturnInstead
    {
      get
      {
        return _returnInstead;
      }
      set
      {
        __isset.returnInstead = true;
        this._returnInstead = value;
      }
    }

    public List<string> Messages
    {
      get
      {
        return _messages;
      }
      set
      {
        __isset.messages = true;
        this._messages = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool rollback;
      public bool executeInstead;
      public bool returnInstead;
      public bool messages;
    }

    public GatEventResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Rollback = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ExecuteInstead = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              ReturnInstead = new GatRowSet();
              ReturnInstead.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Messages = new List<string>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  string _elem14 = null;
                  _elem14 = iprot.ReadString();
                  Messages.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GatEventResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.rollback) {
        field.Name = "rollback";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Rollback);
        oprot.WriteFieldEnd();
      }
      if (ExecuteInstead != null && __isset.executeInstead) {
        field.Name = "executeInstead";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExecuteInstead);
        oprot.WriteFieldEnd();
      }
      if (ReturnInstead != null && __isset.returnInstead) {
        field.Name = "returnInstead";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        ReturnInstead.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Messages != null && __isset.messages) {
        field.Name = "messages";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Messages.Count));
          foreach (string _iter15 in Messages)
          {
            oprot.WriteString(_iter15);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GatEventResponse(");
      sb.Append("Rollback: ");
      sb.Append(Rollback);
      sb.Append(",ExecuteInstead: ");
      sb.Append(ExecuteInstead);
      sb.Append(",ReturnInstead: ");
      sb.Append(ReturnInstead== null ? "<null>" : ReturnInstead.ToString());
      sb.Append(",Messages: ");
      sb.Append(Messages);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
